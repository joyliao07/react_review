:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::  HTTP/AJAX IN REACT  ::::::::::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::  UPDATE STATE WITH HTTP RESPONSE  ::::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::

import axios from 'axios';

class NewClass extends Component {
    state = {
        posts: [],
    }

    componentDidMount () {
        axios.get('your_url_address')
            .then(response => {
                this.setState({posts: response.data});
            });
    }

    render () {
        let posts = this.state.posts.map( post => {
            return <POST
                key={post.id} 
                title={post.title} 
                />;
        });

        return (
            <div>
                {posts}
            </div>
        );
    }
}


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::::::::::  UPDATE FULL-POST WITH SELECTED-ID :::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::

...

class Main extends Component {
    state = {
        posts: [],
        slectedPostID: null,
    }

    postSelectedHandler = (id) => {
        this.setState({slectedPostID: id});
    }

    render () {
        let posts = this.state.posts.map( post => {
            return <POST
                key={post.id} 
                title={post.title}
                clicked={() => this.postSelectedHandler(post.id) }
                />;
        });

        return (
            <div>
                <section>
                    <POST/>
                </section>
                <section>
                    <FullPost id={this.state.slectedPostID}/>
                </section>
                <section>
                    <NewPost/>
                </section>
            </div>
        );
    }
}


...
import axios from 'axios';

class FullPost extends Component {
    state = {loadedPost: null, };

    componentDidUpdate() {
        if (this.props.id) {
            if (! this.state.loadedPost || this.state.loadedPost && this.state.loadedPost.id !== this.props.id) {
                axios.get('your_url_address/posts/' + this.props.id)
                    .then( response => {
                        this.setState({ loadedPost: response.data });
                    });
            }
        }
    }

    render () {
        let post = <p> Please select a post! </p>;

        if (this.post.id) {
            post = <p> Loading.. </p>;
        }

        // the condition needs to be set on loadedPost instead of post.id because React uses asynchronous rendering, and loadedPost is updated after post.id

        if (this.state.loadedPost) {
            post = (
                <div className={classes.FullPost}>
                    <h1> {this.state.loadedPost.title} </h1>
                    <p> {this.state.loadedPost.content} </p>
                </div>
            );
        }
    }
}


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::  UPDATE BACKEND WITH POST METHOD :::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::


...

class NewPost extends Component {
    state = {
        title: '',
        content: '',
    }

    postDataHandler = () => {
        const data = {
            title: this.state.title,
            body: this.state.content,
        };
        axios.post('your_url_address', data)
            .then( response => {
                console.log('postData updated successfully.')
            })
            .catch( error => {
                console.log(error);
            });

    }

    render () {
        return (
            <div className={classes.NewPost}>
                <h1> Add A Title </h1>
                <p> Add Content </p>
                <button onClick={this.postDataHandler}>Add Post</button>
            </div>
        );
    }
}


